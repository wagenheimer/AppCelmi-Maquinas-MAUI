# Notas de Desenvolvimento - AppCelmiPecuaria

## Arquitetura e Padrões

*  **Dotnet 9:** O projeto é construído com .NET 9.

*   **MVVM:** O projeto utiliza o padrão Model-View-ViewModel.
    *   **ViewModels:** Localizados na pasta `ViewModel`.
    *   **Views:** Localizadas na pasta `Views`.
*   **MVVM Toolkit:** Utilizar o `CommunityToolkit.Mvvm` para implementações MVVM (ViewModels, Commands, ObservableProperties, etc.).
    *   Verificar se o pacote `CommunityToolkit.Mvvm` está referenciado no arquivo `.csproj`.
    *   Priorizar o uso de `[ObservableProperty]` e `[RelayCommand]` para reduzir boilerplate.

## Bibliotecas e Pacotes Principais

*   **Shiny** - https://github.com/shinyorg/shiny
    *  Utilizado para funcionalidades como Bluetooth, Background Tasks, etc.
    *  Configuração inicial em `MauiProgram.cs` com `UseShiny()`.
    *  Handlers e serviços específicos podem ser registrados conforme necessário.
    *  Localização e internacionalização podem ser configuradas com `UseLocalizationResourceManager`.
*   **Syncfusion:**
    *   Utilizado para controles de UI avançados, como `SfTabView`.
    *   Licença registrada em `App.xaml.cs`.
    *   Handlers podem precisar ser registrados em `MauiProgram.cs` (ex: `ConfigureSyncfusionCore()`, `ConfigureSyncfusionToolkit()`).
*   **FontAwesome:**
    *   Ícones são definidos na classe `Utils\FontAwesomeIcons.cs`.
    *   Fontes (`.otf`) registradas em `MauiProgram.cs`.
    *   Usar `FontFamily="FontAwesomeSolid"` (ou Regular, Light, Brands) e `Text="{x:Static fontAwesome:FontAwesomeIcons.NomeDoIcone}"` em Labels.
    *   Para `ImageSource` em controles como `SfTabItem`, se `FontImageSource` for suportado, usar:
        ```xaml
        <FontImageSource
            FontFamily="FontAwesomeSolid"
            Glyph="{x:Static fontAwesome:FontAwesomeIcons.NomeDoIcone}"
            Size="24"
            Color="White"/>
        ```
*   **LocalizationResourceManager.Maui:**
    *   Para internacionalização e localização.
    *   Configurado em `MauiProgram.cs` com `UseLocalizationResourceManager`.
    *   Recursos de texto em `Resources/AppResources.resx` (e arquivos específicos de cultura).

## Configurações e Estilo

*   **Cores:** Definidas em `Resources/Styles/Colors.xaml`. Utilizar `StaticResource` para referenciar cores (ex: `{StaticResource CorPrincipal}`).
*   **Estilos:** Estilos globais e específicos de controles em `Resources/Styles/Styles.xaml`.
*   **Versão do App:**
    *   Acessar via `AppInfo.Current.VersionString` (requer `using Microsoft.Maui.ApplicationModel;`).
    *   Pode ser exposta por um ViewModel para binding na UI.

## Boas Práticas e Lembretes

*   **Namespaces:**
    *   `using:AppCelmiPecuaria.ViewModel` para ViewModels.
    *   `using:AppCelmiPecuaria.Views` para Views.
    *   `using:FontAwesome` para ícones FontAwesome.
    *   `clr-namespace:Syncfusion.Maui.Toolkit.TabView;assembly=Syncfusion.Maui.Toolkit` para SfTabView.
*   **Estrutura do Projeto:** Manter a organização de pastas para Views, ViewModels, Utils, Resources, etc.
*   **Handlers MAUI:** Para controles customizados ou de terceiros, verificar a necessidade de registrar handlers em `MauiProgram.cs`.
*   **Limpeza de XAML:** Remover namespaces não utilizados e manter o XAML limpo e legível.
*   **Build e Erros:** Sempre rodar o build (`run_build`) após modificações e verificar erros (`get_errors`) para garantir a integridade do código.

## Exemplo de ViewModel com MVVM Toolkit

```csharp
// ViewModel/ExemploViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;

namespace AppCelmiPecuaria.ViewModel
{
    public partial class ExemploViewModel : ObservableObject
    {
        [ObservableProperty]
        private string _textoExemplo;

        [ObservableProperty]
        private bool _estaOcupado;

        public ExemploViewModel()
        {
            TextoExemplo = "Olá do MVVM Toolkit!";
        }

        [RelayCommand]
        private async Task FazerAlgumaCoisaAsync()
        {
            if (EstaOcupado)
                return;

            EstaOcupado = true;
            // Lógica assíncrona aqui
            await Task.Delay(1000); // Simula trabalho
            TextoExemplo = "Tarefa Concluída!";
            EstaOcupado = false;
        }
    }
}
```

---
*Este arquivo é um lembrete gerado para auxiliar no desenvolvimento. Adapte conforme necessário.*
